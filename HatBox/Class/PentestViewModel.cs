using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.ComponentModel;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Collections.ObjectModel;
using System.Windows.Threading;
using System.Data;
using System.Windows.Controls;

namespace HatBox.Class
{
    class PentestViewModel : INotifyPropertyChanged
    {
        Pentest _pentest;
        public Pentest Pentest
        {
            get
            {
                return _pentest;
            }
            set
            {
                _pentest = value;
            }
        }

        public string Url
        {
            get
            {
                return Pentest.Url;
            }
            set
            {
                Pentest.Url = value;
            }
        }
        public string Error
        {
            get
            {
                return Pentest.Error;
            }
            set
            {
                Pentest.Error = value;
            }
        }
        public string Host
        {
            get
            {
                return Pentest.Host;
            }
        }

        public string DbType
        {
            get
            {
                return Pentest.DbType;
            }
            set
            {
                Pentest.DbType = value;
                RaisePropertyChanged("DbType");
            }
        }
        public string ServerType
        {
            get
            {
                return Pentest.ServerType;
            }
            set
            {
                Pentest.ServerType = value;
                RaisePropertyChanged("ServerType");
            }
        }

        public Visibility LoaderVisible
        {
            get
            {
                return Pentest.LoaderVisible;
            }
            set
            {
                Pentest.LoaderVisible = value;
                RaisePropertyChanged("LoaderVisible");
            }
        }
        public short LoaderValue
        {
            get
            {
                return Pentest.LoaderValue;
            }
            set
            {
                Pentest.LoaderValue = value;
                RaisePropertyChanged("LoaderValue");
            }
        }
        public bool LoaderUnknown
        {
            get
            {
                return Pentest.LoaderUnknown;
            }
            set
            {
                Pentest.LoaderUnknown = value;
                RaisePropertyChanged("LoaderUnknown");
            }
        }

        public bool IsEnabled
        {
            get
            {
                return _pentest.IsEnabled;
            }
            set
            {
                _pentest.IsEnabled = value;
                RaisePropertyChanged("IsEnabled");
            }
        }
        public ObservableCollection<Database> Databases
        {
            get
            {
                return Pentest.Databases;
            }
            set
            {
                Pentest.Databases = value;
            }
        }
        public DataTable Results
        {
            get
            {
                return Pentest.Results;
            }
            set
            {
                Pentest.Results = value;
            }
        }
        public string Query
        {
            get
            {
                return Pentest.Query;
            }
            set
            {
                Pentest.Query = value;
                RaisePropertyChanged("Query");
            }
        }

        public string LogValue
        {
            get
            {
                return Pentest.LogValue;
            }
            set
            {
                Pentest.LogValue = value;
                RaisePropertyChanged("LogValue");
            }
        }

        public PentestViewModel()
        {
            Pentest = new Pentest();
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region Methods

        private void RaisePropertyChanged(string propertyName)
        {
            // take a copy to prevent thread issues
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        #endregion

        public delegate void DelegateProcess();
        public void ProcessPentest()
        {
            LoaderVisible = Visibility.Visible;
            LogValue = string.Empty;
            GetStartInfo();
            AddLogLine(string.Format("{0} {1}", _pentest.Process.StartInfo.FileName, _pentest.Process.StartInfo.Arguments));
            _pentest.Process.Start();
            _pentest.Process.BeginOutputReadLine();
            _pentest.Process.Exited += (senderTemp, args) =>
            {
                LoaderVisible = Visibility.Hidden;
                ClearProcess();

                string lastContent = _pentest.GetLastLog();

                ServerType = Regex.Match(lastContent, "web application technology: (.*)").Groups[1].Value;
                DbType = Regex.Match(lastContent, "back-end DBMS: (.*)").Groups[1].Value;

                Application.Current.Dispatcher.Invoke(new DelegateUpdateDatabases(UpdateDatabases), Regex.Matches(lastContent, "\\[\\*\\] (.*)"));
            };
        }

        #region " Delegates "

        public delegate void DelegateUpdateDatabases(MatchCollection ms);
        public void UpdateDatabases(MatchCollection ms)
        {
            Databases.Clear();

            foreach (Match m in ms)
            {
                Databases.Add(new Database { Name = m.Groups[1].Value.Trim(), Selectable = false, Tables = new ObservableCollection<Table> { new Table { Name = string.Empty } } });
            }
        }

        public delegate void DelegateUpdateTables(Database item);
        public void UpdateTables(Database item)
        {
            LoaderVisible = Visibility.Visible;
            item.Tables.Clear();
            item.Tables.Add(new Table { Name = "En cours ...", Selectable = false });

            GetStartInfo(string.Format("-D {0} --tables", item.Name));
            AddLogLine(string.Format("{0} {1}", _pentest.Process.StartInfo.FileName, _pentest.Process.StartInfo.Arguments));
            _pentest.Process.Start();
            _pentest.Process.BeginOutputReadLine();
            _pentest.Process.Exited += (senderTemp, args) =>
            {
                ClearProcess();
                string lastContent = _pentest.GetLastLog();

                Application.Current.Dispatcher.Invoke(new DelegateDisplayTables(DisplayTables), item, Regex.Matches(lastContent, "\\|(.*)\\|"));
            };
        }
        public delegate void DelegateDisplayTables(Database item, MatchCollection ms);
        public void DisplayTables(Database item, MatchCollection ms)
        {
            item.Selectable = true;
            item.Tables.Clear();

            foreach (Match m in ms)
            {
                item.Tables.Add(new Table { Name = m.Groups[1].Value.Trim(), Selectable = false, ParentDatabase = item, Columns = new ObservableCollection<Column> { new Column { Name = string.Empty } } });
            }
        }

        public delegate void DelegateUpdateColumns(Table item);
        public void UpdateColumns(Table item)
        {
            LoaderVisible = Visibility.Visible;
            item.Columns.Clear();
            item.Columns.Add(new Column { Name = "En cours ...", Selectable = false });

            GetStartInfo(string.Format("-D {0} -T {1} --columns", item.ParentDatabase.Name, item.Name));
            AddLogLine(string.Format("{0} {1}", _pentest.Process.StartInfo.FileName, _pentest.Process.StartInfo.Arguments));
            _pentest.Process.Start();
            _pentest.Process.BeginOutputReadLine();
            _pentest.Process.Exited += (senderTemp, args) =>
            {
                ClearProcess();
                string lastContent = _pentest.GetLastLog();

                Application.Current.Dispatcher.Invoke(new DelegateDisplayColumns(DisplayColumns), item, Regex.Matches(lastContent, "\\|(.*)\\|(.*)\\|"));
            };
        }
        public delegate void DelegateDisplayColumns(Table item, MatchCollection ms);
        public void DisplayColumns(Table item, MatchCollection ms)
        {
            item.Selectable = true;
            item.Columns.Clear();

            foreach (Match m in ms)
            {
                if (!Regex.IsMatch(m.Value, "\\|(.*)Column(.*)\\|(.*)Type(.*)\\|"))
                {
                    item.Columns.Add(new Column { ParentTable = item, Name = m.Groups[1].Value.Trim() });
                }
            }
        }

        public void RetrieveData(DataGrid dgr, bool query = false)
        {
            LoaderVisible = Visibility.Visible;
            string dbStr = string.Empty;
            string tblStr = string.Empty;
            List<string> colStr = new List<string>();

            foreach (Database db in Databases)
            {
                if (db.Tables != null)
                {
                    foreach (Table tbl in db.Tables)
                    {
                        if (tbl.Columns != null)
                        {
                            foreach (Column col in tbl.Columns)
                            {
                                if (col.Selected)
                                {
                                    dbStr = db.Name;
                                    tblStr = tbl.Name;
                                    colStr.Add(col.Name);
                                }
                            }
                        }
                    }
                }
            }
            if (query)
            {
                GetStartInfo(string.Format("--sql-query=\"{0}\"", Query));
            }
            else
            {
                GetStartInfo(string.Format("-D {0} -T {1} -C {2} --dump --stop=50", dbStr, tblStr, colStr.Aggregate((i, j) => i + "," + j)));
            }

            AddLogLine(string.Format("{0} {1}", _pentest.Process.StartInfo.FileName, _pentest.Process.StartInfo.Arguments));
            _pentest.Process.Start();
            _pentest.Process.BeginOutputReadLine();
            _pentest.Process.Exited += (senderTemp, args) =>
            {
                ClearProcess();
                string lastContent = _pentest.GetLastLog();

                Application.Current.Dispatcher.Invoke(new DelegateDisplayDatas(DisplayDatas), dgr, Regex.Matches(lastContent, "\\|.*\\|"));
            };
        }
        // A voir
        public void ProcessLauncher(string options, Action a)
        {
            GetStartInfo(options);
            AddLogLine(string.Format("{0} {1}", _pentest.Process.StartInfo.FileName, _pentest.Process.StartInfo.Arguments));
            _pentest.Process.Start();
            _pentest.Process.BeginOutputReadLine();
            _pentest.Process.Exited += (senderTemp, args) =>
            {
                ClearProcess();
                string lastContent = _pentest.GetLastLog();

                a.Invoke();
            };
        }

        public delegate void DelegateDisplayDatas(DataGrid dgr, MatchCollection ms);
        public void DisplayDatas(DataGrid dgr, MatchCollection ms)
        {
            Results.Clear();
            Results.Rows.Clear();
            Results.Columns.Clear();

            bool first = false;
            string[] itemGroup;
            DataRow dr;
            foreach (Match m in ms)
            {
                itemGroup = m.Groups[0].ToString().Substring(1, m.Groups[0].ToString().Length - 2).Split('|');
                if (!first)
                {
                    first = true;
                    foreach (string item in itemGroup)
                    {
                        Results.Columns.Add(item.Trim());
                    }
                }
                else
                {
                    dr = Results.NewRow();
                    var i = 0;
                    foreach (string item in itemGroup)
                    {
                        dr[i] = item.Trim();
                        i++;
                    }

                    Results.Rows.Add(dr);
                }
            }

            var temp = dgr.ItemsSource;
            dgr.ItemsSource = null;
            dgr.ItemsSource = temp;
        }

        #endregion

        public void ClearProcess()
        {
            LoaderVisible = Visibility.Hidden;
            LoaderValue = 0;
            LoaderUnknown = true;

            if (_pentest.Process != null)
            {
                _pentest.Process.Close();
                _pentest.Process.Dispose();
                _pentest.Process = null;
            }

            IsEnabled = true;
        }

        public void GetStartInfo(string extraArg = "--dbs -f")
        {
            ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.RedirectStandardInput = true;
            startInfo.UseShellExecute = false;
            startInfo.CreateNoWindow = true;
            startInfo.WindowStyle = ProcessWindowStyle.Hidden;
            startInfo.FileName = System.IO.Path.GetFullPath("Ressources/sqlmap.exe");
            startInfo.Arguments = "-u \"" + Url + "\" -o -v 3 --batch --eta " + extraArg;

            _pentest.Process = new Process();
            _pentest.Process.EnableRaisingEvents = true;
            _pentest.Process.StartInfo = startInfo;
            _pentest.Process.OutputDataReceived += (s, a) => { ProcessETA(a.Data); AddLogLine(a.Data); };
            _pentest.Process.ErrorDataReceived += (s, a) => { ProcessETA(a.Data); AddLogLine(a.Data); };

            IsEnabled = false;
        }

        public void AddLogLine(string line)
        {
            LogValue = string.Format("{0}{1}\n", LogValue, line);
        }

        public void ProcessETA(string shell)
        {
            if (shell != null)
            {

                string rgx = "([0-9]*)% \\[.*\\] [0-9]*/[0-9]*(  ETA ([0-9]*:[0-9]*))?.*";

                Match m = Regex.Match(shell, rgx);
                if (Regex.IsMatch(shell, rgx))
                {
                    LoaderUnknown = false;
                    LoaderValue = Convert.ToInt16(m.Groups[1].Value);
                }
            }
        }

        internal void UnselectOtherTables(Table table)
        {
            foreach (Database db in Databases)
            {
                if (db.Tables != null)
                {
                    foreach (Table tbl in db.Tables)
                    {
                        if (tbl != table)
                        {
                            tbl.Selected = false;
                            if (tbl.Columns != null)
                            {
                                foreach (Column col in tbl.Columns)
                                {
                                    col.Selected = false;
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void SelectColumns(Table tbl)
        {
            if (tbl.Columns != null)
            {
                foreach (Column col in tbl.Columns)
                {
                    col.Selected = true;
                }
            }
        }
        internal void UnselectColumns(Table tbl)
        {
            if (tbl.Columns != null)
            {
                foreach (Column col in tbl.Columns)
                {
                    col.Selected = false;
                }
            }
        }
    }
}
